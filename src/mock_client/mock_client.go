// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/quaponatech/microservice-template/src/protobuf (interfaces: MicroServiceClient)

package mock_protobuf

import (
	gomock "github.com/golang/mock/gomock"
	protobuf "github.com/quaponatech/microservice-template/src/protobuf"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Mock of MicroServiceClient interface
type MockMicroServiceClient struct {
	ctrl     *gomock.Controller
	recorder *_MockMicroServiceClientRecorder
}

// Recorder for MockMicroServiceClient (not exported)
type _MockMicroServiceClientRecorder struct {
	mock *MockMicroServiceClient
}

func NewMockMicroServiceClient(ctrl *gomock.Controller) *MockMicroServiceClient {
	mock := &MockMicroServiceClient{ctrl: ctrl}
	mock.recorder = &_MockMicroServiceClientRecorder{mock}
	return mock
}

func (_m *MockMicroServiceClient) EXPECT() *_MockMicroServiceClientRecorder {
	return _m.recorder
}

func (_m *MockMicroServiceClient) Hello(_param0 context.Context, _param1 *protobuf.Request, _param2 ...grpc.CallOption) (*protobuf.Response, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Hello", _s...)
	ret0, _ := ret[0].(*protobuf.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMicroServiceClientRecorder) Hello(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Hello", _s...)
}
